import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI, HarmCategory, HarmBlockThreshold

# Carrega as vari√°veis de ambiente
load_dotenv()

# --- Bloco de configura√ß√£o do LLM ---
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash-latest",
    temperature=0.1,
    google_api_key=os.getenv("GOOGLE_API_KEY"),
    safety_settings={
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
)

# --- Base de Conhecimento ---
def carregar_base_conhecimento():
    try:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(base_dir, 'knowledge_base.txt')
        with open(file_path, "r", encoding="utf-8") as f:
            print(f"‚úÖ Base de conhecimento carregada com sucesso de: {file_path}")
            return f.read()
    except FileNotFoundError:
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'knowledge_base.txt')
        print(f"AVISO: Arquivo 'knowledge_base.txt' n√£o encontrado em {file_path}")
        return ""

base_de_conhecimento = carregar_base_conhecimento()


# --- Fun√ß√µes do C√©rebro do Bot ---

def classificar_mensagem(texto_do_usuario: str, historico_conversa: str) -> str:
    prompt_de_classificacao = f"""
    Analise a √öLTIMA mensagem do usu√°rio para definir a inten√ß√£o.
    Categorias: SAUDACAO, DESPEDIDA, FINANCEIRO, GERAL, DUVIDA_GERAL.

    REGRAS:
    1. SAUDACAO: Apenas cumprimentos (Ol√°, Bom dia, Oi).
    2. DESPEDIDA: Apenas despedidas ou agradecimentos (Obrigado, Tchau).
    3. FINANCEIRO: Sobre boletos, notas fiscais, pagamentos, cancelamentos. ALTA PRIORIDADE.
    4. DUVIDA_GERAL: Perguntas sobre pre√ßos, hor√°rios, servi√ßos, conv√™nios.
    5. GERAL: Pedidos de agendamento, vagas, e outras d√∫vidas que precisam de um humano.
    6. PRIORIDADE: Se a mensagem tiver um cumprimento E uma pergunta (ex: "Oi, qual o pre√ßo?"), a inten√ß√£o √© a da pergunta (DUVIDA_GERAL).

    Hist√≥rico para contexto:
    {historico_conversa}
    
    √öLTIMA MENSAGEM DO USU√ÅRIO: '{texto_do_usuario}'

    Retorne APENAS uma das seguintes palavras: SAUDACAO, DESPEDIDA, FINANCEIRO, GERAL, DUVIDA_GERAL.
    """
    try:
        resposta = llm.invoke(prompt_de_classificacao)
        resultado = resposta.content.strip().upper()
        if resultado in ["SAUDACAO", "DESPEDIDA", "FINANCEIRO", "GERAL", "DUVIDA_GERAL"]:
            return resultado
        return "GERAL" 
    except Exception as e:
        print(f"‚ùå Erro na chamada ao LLM para classifica√ß√£o: {e}")
        return "GERAL"

def responder_duvida(texto_do_usuario: str, historico_conversa: str) -> str:
    prompt_de_resposta = f"""
    Voc√™ √© um assistente virtual da 'Casa de Madeira'. Sua √∫nica fonte de informa√ß√£o √© a "Base de Conhecimento".

    ***REGRAS DE COMPORTAMENTO***
    1.  **RESTRITO √Ä BASE:** Voc√™ S√ì PODE usar as informa√ß√µes da "Base de Conhecimento". N√ÉO invente informa√ß√µes.
    2.  **SE N√ÉO SOUBER, ENCAMINHE:** Se a resposta n√£o estiver na base ou se as regras de l√≥gica n√£o se aplicarem, sua √∫nica resposta deve ser: "Hmm, n√£o encontrei essa informa√ß√£o espec√≠fica. J√° estou passando para nossa equipe que poder√° te ajudar com isso! üòä"
    3.  **SEJA DIRETO:** Responda de forma clara e objetiva.

    ***L√ìGICA DE RACIOC√çNIO (MUITO IMPORTANTE!)***
    1.  **L√ìGICA DE CONV√äNIOS:** A base de conhecimento lista os servi√ßos que CADA conv√™nio cobre. Se um usu√°rio perguntar se um servi√ßo (ex: Pilates) √© coberto por um conv√™nio, e esse servi√ßo N√ÉO EST√Å LISTADO sob aquele conv√™nio, voc√™ deve concluir que N√ÉO √© coberto. Sua resposta deve ser clara, por exemplo: "Para o conv√™nio X, cobrimos apenas os seguintes procedimentos: [lista]. O Pilates √© um atendimento particular. O valor √© R$ 238,00 mensais."
    2.  **L√ìGICA DE NATA√á√ÉO (FLUXO OBRIGAT√ìRIO):**
        -   Se o usu√°rio perguntar sobre nata√ß√£o, sua PRIMEIRA a√ß√£o √© SEMPRE fazer as 3 perguntas que est√£o na base de conhecimento (idade, experi√™ncia, per√≠odo).
        -   Analise o hist√≥rico da conversa. Se o usu√°rio j√° respondeu a uma ou mais perguntas, N√ÉO as repita. Fa√ßa apenas as que faltam.
        -   SOMENTE AP√ìS ter as respostas para as 3 perguntas, voc√™ deve consultar a base de conhecimento e fornecer o or√ßamento correto para a idade informada.
        -   NUNCA encaminhe para um humano durante o fluxo de perguntas da nata√ß√£o, a menos que o usu√°rio pe√ßa explicitamente.

    === Base de Conhecimento ===
    ---
    {base_de_conhecimento}
    ---
    
    === Hist√≥rico da Conversa ===
    {historico_conversa}
    ---

    TAREFA: Com base na √öLTIMA mensagem do usu√°rio ('{texto_do_usuario}'), no hist√≥rico e nas REGRAS DE L√ìGICA, formule a resposta correta.
    """
    try:
        resposta = llm.invoke(prompt_de_resposta)
        return resposta.content
    except Exception as e:
        print(f"‚ùå Erro na chamada ao LLM para responder d√∫vida: {e}")
        return "Obrigado por sua mensagem. Em breve um de nossos atendentes entrar√° em contato para te ajudar."

def encaminhar_para_atendente(classificacao: str) -> str:
    """Retorna o nome do setor baseado na classifica√ß√£o."""
    return "Atendente do Financeiro" if classificacao == "FINANCEIRO" else "Atendente Geral"
